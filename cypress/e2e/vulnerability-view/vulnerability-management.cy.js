const navBarSelector = require('../../selectors/navBarSelector.js')
const vulnerabilityListViewSelector = require('../../selectors/vulnerabilityListViewSelector.js')
const weaknessSelector = require('../../selectors/weaknessSelector.js');
const modelingViewSelector = require('../../selectors/modelingViewSelector.js');
const dayjs = require('dayjs')
import { recurse } from 'cypress-recurse';
var projectName;

describe('Vulnerability List View', () => {
    var projectId;
    var vulnerability;
    var weakness;
    var bom;
    var exploitableRationale;
    var weaknessDescription;
    var preControlRiskValue;
    var riskRationale;

    before(() => {//Creating Project
        cy.viewport(1920, 1080);
        cy.login();
        // Generate a random project name
        cy.generateProjectName().then(($generatedName) => {
            projectName = $generatedName;
            weaknessDescription = 'Weakness is being Automated' + ': ' + $generatedName;
            exploitableRationale = 'Exploitable Rationale Test Description';
            preControlRiskValue = '1';
            riskRationale = '2';
            cy.createProject(projectName);
        })
        cy.window().then((win) => {
            const newDesignData = JSON.parse(win.localStorage.getItem('newDesign'));
            expect(newDesignData).to.not.be.null;
            expect(newDesignData.project).to.not.be.undefined;
            // Extract the project ID from the nested structure
            projectId = newDesignData.project.id;//projectId to be used 
            expect(projectId).to.not.be.undefined;
            cy.log("Project ID is: " + projectId);
        })
        //setup the vulnerability object
        vulnerability = {
            description: 'TO BE DELETED',
            component: 'Microcontroller0',
            attackVector: '(AV:N)',
            attackComplexity: '(AC:H)',
            privilegesRequired: '(PR:L)',
            userInteraction: '(UI:R)',
            scope: '(S:U)',
            confidentialityImpact: '(C:N)',
            integerityImpact: '(I:L)',
            availabilityImpact: '(A:H)',
            descriptionAttribute: 'ng-reflect-model',
        };
        //setup Weakness objects
        weakness = {
            responsibleUser: 'Automation Test User',
            identificationMethod: 'Identification Method',
            sourceNotes: 'Source Notes',
            sourceNotesLink: 'Source Notes Link',
            component: 'Microcontroller0',
            attackSurface: 'Attack Surface',
            asset: 'Asset',
            cweID: '2',
            cweWeaknessType: 'Software Development',
            cweWeaknessCategory: 'Cryptographic Issues',
        };
        //setup BOM objects
        bom = {
            vendor: 'Automation_SBOM',
            product: 'Automation_SBOM',
            version: '0',
            part: 'Operating System',
            component: 'Microcontroller0',
        }
    })

    beforeEach(() => {// Logging in and loading the created project
        cy.viewport(1920, 1080);
        cy.login();
        cy.loadProject(projectId);
    })

    it('Verify the "Add New Vulnerability" button on "Vulnerability list view" page (MAIN-TC-205, MAIN-TC-217, MAIN-TC-210)', () => {
        cy.visit(Cypress.env('baseURL') + '/vulnerabilities').then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).click();
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddUpdateDialog).should('exist');
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddUpdateDialog).should('include.text', 'Add a new vulnerability');
            cy.get(navBarSelector.navBarRunTheModelButton).should('not.be.enabled');
        })
    })

    it('Verify the process of adding a new vulnerability (MAIN-TC-223, MAIN-TC-239, MAIN-TC-242, MAIN-TC-238, MAIN-TC-648, , MAIN-TC-637, MAIN-TC-641)', () => {
        cy.intercept('POST', Cypress.env('apiURL') + '/vulnerability*').as('postRequest').then(() => {
            cy.addNewVulnerability(vulnerability);
        }).then(() => {
            //verify the network call
            cy.get('@postRequest').its('response.statusCode').should('eq', 200);
        }).then(() => {
            //verify it is shown in the front-end
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDescriptionTextArea).should('exist');
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewBaseScoreTableData).should('include.text', '5.4').and('include.text', 'MEDIUM');
        }).then(() => {
            const todaysDate = dayjs().format('YYYY/MM/DD');
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDateAddedTableData).should('include.text', todaysDate);
        })
    })

    it('Verify the process of delete vulnerability (MAIN-TC-229, MAIN-TC-212)', () => {
        cy.visit(Cypress.env('baseURL') + '/vulnerabilities').then(() => {
            cy.deleteVulnerability(1);//the row of the current vulnerability == 1
        }).then(() => {
            //verify it is shown in the front-end
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDescriptionTextArea).should('not.exist');
        })
    })

    it('Verify that the Highlight button operation on the Vulnerability page for user-generated vulnerabilities (MAIN-TC-655)', () => {
        vulnerability.description = 'TO BE HIGHLIGHTED';
        cy.visit(Cypress.env('baseURL') + '/vulnerabilities').then(() => {
            cy.addNewVulnerability(vulnerability);//generate vulnerability
        }).then(() => {
            cy.highlightVulnerability(1);//the row of the current vulnerability == 1
        })
    })

    it('Verify that the Remove Highlight button operation on the Vulnerability page for user-generated vulnerabilities (MAIN-TC-656)', () => {
        vulnerability.description = 'TO REMAIN UNHIGHLIGHTED';
        cy.visit(Cypress.env('baseURL') + '/vulnerabilities').then(() => {
            cy.addNewVulnerability(vulnerability);//generate vulnerability
        }).then(() => {
            cy.wait(2000);
            cy.highlightVulnerability(1);//the row of the current vulnerability == 1
        }).then(() => {
            cy.wait(2000);
            cy.removeVulnerabilityHighlight(1);//the row of the current vulnerability == 1
        })
    })

    it('Verify the process for update vulnerability (MAIN-TC-221, MAIN-TC-222, MAIN-TC-213)', () => {
        vulnerability.description = 'TO BE UPDATED';
        cy.visit(Cypress.env('baseURL') + '/vulnerabilities').then(() => {
            cy.addNewVulnerability(vulnerability);//generate vulnerability
            cy.wait(1000);
        }).then(() => {
            vulnerability.description = 'AFTER UPDATE';
            vulnerability.row = 1;
            cy.intercept('POST', Cypress.env('apiURL') + '/vulnerability*').as('postRequest');
            cy.updateVulnerability(vulnerability);
        }).then(() => {
            //verify it is shown in the front-end
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewDescriptionTextArea).first().should('have.attr', vulnerability.descriptionAttribute, vulnerability.description);
            //verify the network call
            cy.get('@postRequest').its('response.statusCode').should('eq', 200);
        })
    })

    it('Verify the weakness linking feature on vulnerability page (MAIN-TC-930)', () => {
        cy.createComponent().then(() => {
            cy.addNewWeakness(weakness, weaknessDescription);
        }).then(() => {
            cy.wait(2000);
            cy.get(weaknessSelector.vulnerabilityAnalysisButton).first().click({ force: true });  // Open Analyze Weakness Dialog
        }).then(() => {
            cy.get(weaknessSelector.analyzeWeaknessExploitableButton).click();
            cy.get(weaknessSelector.weaknessDropDownOptionList).eq(0).click();
        }).then(() => {
            recurse(() =>
                cy.get(weaknessSelector.analyzeWeaknessExploitableRationaleFieldBox).clear().type(exploitableRationale),
                ($inputField) => $inputField.val() === exploitableRationale,
                { delay: 1000 })
                .should('have.value', exploitableRationale);
        }).then(() => {
            recurse(() =>
                cy.get(weaknessSelector.preControlRiskValueFieldBox).clear().type(preControlRiskValue),
                ($inputField) => $inputField.val() === preControlRiskValue,
                { delay: 1000 })
                .should('have.value', preControlRiskValue);
        }).then(() => {
            recurse(() =>
                cy.get(weaknessSelector.riskRationaleFieldBox).clear().type(riskRationale),
                ($inputField) => $inputField.val() === riskRationale,
                { delay: 1000 })
                .should('have.value', riskRationale);
        }).then(() => {
            cy.get(weaknessSelector.globalCheckBox).check({ force: true });
            cy.get(weaknessSelector.globalConfirmButton).click();
        }).then(() => {
            cy.wait(2000);
            cy.get(weaknessSelector.generateVulnerabilityFromThisWeaknessButton).click();
            cy.get(weaknessSelector.globalConfirmButton).click();
        }).then(() => {
            cy.get(weaknessSelector.snackBarMessage).should('include.text', 'Changes saved successfully');
        }).then(() => {
            cy.addNewVulnerability(vulnerability).then(() => {
                cy.get(navBarSelector.subsequentSnackBarElement).should('be.visible').and('include.text', 'Successfully added vulnerability');
            })
        }).then(() => {
            cy.linkWeaknessWithVulnerability(1, 1).then(() => {
                cy.get(navBarSelector.subsequentSnackBarElement).should('be.visible').and('include.text', 'Changes saved successfully');
            })
        })
    })

    it('Verify user shall be able to select the "Component" , "SBOM/HBOM" name from the drop down in the vulnerability page (MAIN-TC-2017, MAIN-TC-211, MAIN-TC-324)', () => {
        cy.addNewBom(bom).then(() => {
            cy.visit(Cypress.env("baseURL") + "/modeling");
        }).then(() => {
            cy.get(modelingViewSelector.drawingCanvasMicrocontroller).rightclick();
            cy.wait(2000);
        }).then(() => {
            cy.get(modelingViewSelector.componentSpecSoftwareBomLabel).click();
            cy.get(modelingViewSelector.componentSpecSoftwareBomOption).contains(bom.vendor).click();
        }).then(() => {
            cy.get(modelingViewSelector.modelingViewSnackBar).should('include.text', 'Changes saved successfully.');
        }).then(() => {
            bom.vendor = 'Automation_HBOM';
            bom.product = 'Automation_HBOM';
            bom.part = 'Hardware';
            cy.addNewBom(bom);
        }).then(() => {
            cy.wait(2000);
            vulnerability.description = 'TC_2017: Vulnerability is being Automated';
            cy.visit(Cypress.env('baseURL') + '/vulnerabilities').then(() => {
                cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).should('exist').then(() => {
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).click();
                }).then(() => {
                    cy.wait(2000);
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewReviewedCheckBox).click();
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewComponentField).click();
                    cy.get(vulnerabilityListViewSelector.vulnerabilityDropDownOption).contains(vulnerability.component).click();
                }).then(() => {
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewHbomField).click();
                    cy.get(vulnerabilityListViewSelector.vulnerabilityDropDownOption).contains(bom.vendor).click();
                }).then(() => {
                    bom.vendor = 'Automation_SBOM';
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewSbomField).click();
                    cy.get(vulnerabilityListViewSelector.vulnerabilityDropDownOption).contains(bom.vendor).click();
                }).then(() => {
                    cy.get(vulnerabilityListViewSelector.addNewVulnerabilityBaseScoreMetricsPanel).click();
                    if (vulnerability.description) {
                        recurse(
                            () => cy.get(vulnerabilityListViewSelector.addNewVulnerabilityDescriptionTextArea).type(vulnerability.description),
                            ($inputField) => $inputField.val() === vulnerability.description,
                            { delay: 1000 }
                        )
                    }
                    switch (vulnerability.cvssVersion) {
                        case '2.0':
                            cy.get(vulnerabilityListViewSelector.addNewVulnerabilityCvssVersion2Button).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.accessVector).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.accessComplexity).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.authentication).click();
                            break;
                        default:
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.attackVector).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.attackComplexity).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.privilegesRequired).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.userInteraction).click();
                            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.scope).click();
                    }
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.confidentialityImpact).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.integerityImpact).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.availabilityImpact).click();
                }).then(() => {
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewCvssScore).first().then(($element) => {
                        const baseScore = parseFloat($element.text()); // Assuming the base score is represented as text
                        expect(baseScore).to.be.greaterThan(0); // Assert that base score is greater than 0
                        expect(baseScore).to.be.at.most(10); // Assert that base score is less than or equal to 10
                    });
                }).then(() => {
                    cy.get(navBarSelector.confirmDialogueConfirmButton).click();
                    cy.get(navBarSelector.subsequentSnackBarElement).should('include.text', 'Successfully added vulnerability');
                }).then(() => {
                    cy.get(vulnerabilityListViewSelector.vulnerabilityReviewedContentTableData).first().should('include.text', 'Yes').click();
                    cy.get(vulnerabilityListViewSelector.vulnerabilityListViewReviewedCheckBox).click();
                }).then(() => {
                    cy.get(vulnerabilityListViewSelector.vulnerabilityUndoReviewStatusConfirmationDialogText).should('exist');
                })
            })
        })
    })

    it('Verify filter option on "Vulnerability" page, can filter "Reviewed" and "Validated" Vulnerabilities (MAIN-TC-1548)', () => {
        vulnerability.description = 'TC-1548: Vulnerability will be Reviewed';
        cy.intercept('POST', Cypress.env('apiURL') + '/vulnerability*').as('postRequest').then(() => {
        cy.visit(Cypress.env('baseURL') + '/vulnerabilities');
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).should('exist');
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).click();
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.addNewVulnerabilityBaseScoreMetricsPanel).click();
            if (vulnerability.description) {
                recurse(
                    () => cy.get(vulnerabilityListViewSelector.addNewVulnerabilityDescriptionTextArea).type(vulnerability.description),
                    ($inputField) => $inputField.val() === vulnerability.description,
                    { delay: 1000 }
                )
            }
            switch (vulnerability.cvssVersion) {
                case '2.0':
                    cy.get(vulnerabilityListViewSelector.addNewVulnerabilityCvssVersion2Button).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.accessVector).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.accessComplexity).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.authentication).click();
                    break;
                default:
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.attackVector).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.attackComplexity).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.privilegesRequired).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.userInteraction).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.scope).click();
            }
            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.confidentialityImpact).click();
            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.integerityImpact).click();
            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.availabilityImpact).click();
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewReviewedCheckBox).click();
            cy.get(navBarSelector.confirmDialogueConfirmButton).click();
            cy.get('@postRequest').its('response.statusCode').should('eq', 200);
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityReviewedContentTableData).first().should('include.text', 'Yes');
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityShowFilterButton).click();
            cy.get(vulnerabilityListViewSelector.showReviewedVulnerabilitiesButton).click();
            cy.wait(2000);
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewVulnerabilityRow).should('have.length', 1);
        }).then(() => {
            vulnerability.description = 'TC-1548: Vulnerability will be Validated';
            cy.intercept('POST', Cypress.env('apiURL') + '/vulnerability*').as('postRequest');
        }).then(() => {
            cy.visit(Cypress.env('baseURL') + '/vulnerabilities');
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).should('exist');
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewAddNewButton).click();
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.addNewVulnerabilityBaseScoreMetricsPanel).click();
            if (vulnerability.description) {
                recurse(
                    () => cy.get(vulnerabilityListViewSelector.addNewVulnerabilityDescriptionTextArea).type(vulnerability.description),
                    ($inputField) => $inputField.val() === vulnerability.description,
                    { delay: 1000 }
                )
            }
            switch (vulnerability.cvssVersion) {
                case '2.0':
                    cy.get(vulnerabilityListViewSelector.addNewVulnerabilityCvssVersion2Button).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.accessVector).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.accessComplexity).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.authentication).click();
                    break;
                default:
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.attackVector).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.attackComplexity).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.privilegesRequired).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.userInteraction).click();
                    cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.scope).click();
            }
            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.confidentialityImpact).click();
            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.integerityImpact).click();
            cy.get(vulnerabilityListViewSelector.metricsScoreRadioInputLabel).contains(vulnerability.availabilityImpact).click();
            cy.get(vulnerabilityListViewSelector.optionsCheckBox).last().check();
            cy.get(navBarSelector.confirmDialogueConfirmButton).click();
            cy.get('@postRequest').its('response.statusCode').should('eq', 200);
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityValidatedContentTableData).first().should('include.text', 'Yes');
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityShowFilterButton).click();
            cy.get(vulnerabilityListViewSelector.showValidatedVulnerabilitiesButton).click();
            cy.wait(2000);
        }).then(() => {
            cy.get(vulnerabilityListViewSelector.vulnerabilityListViewVulnerabilityRow).should('have.length', 1);
        })
    })
})

describe('CLEANUP: Project Deletion', () => {
    it('Deleting The Project If Created', () => {
        cy.viewport(1920, 1080);
        cy.login().then(() => {
            cy.deleteProject(projectName);
        })
    })
})